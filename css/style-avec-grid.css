/* préparation de nos valeurs spéciales, : le rose
on va les stocker dans des variables
main-color -> #f05768; */

/* on a besoin d'un scope pour definir nos variables et pour qu'elles soit dispo de partout on utilise le selecteur :root 
:root represent l'element <html> */
:root {

    /* --nomDeVariable: valeur */
    --main-color: #dde114;
  
  }
  
  
  /* ---- regles générales ---- */
  
  /* de manière générale je veux écraser le bleu sur les liens et mettre du vert */
  a {
    color: yellowgreen;
  }
  
  /* tous les titres sont en italic et bold et on espace après eux */
  h1, h2, h3 {
    font-style: italic;
    font-weight: bold;
    margin-bottom: 1em;
  }
  
  /* tous les paragraphes ont un espace après eux : margin bottom */
  p {
    margin-bottom: 1em;
  }
  
  /* ---- regles spécifiques ---- */
  
  body {
    background-color: #2F3749;
    /* on place la font sur le body, c'est une propriété hérité donc toutes les balises enfants auront la font aussi */
    font-family: 'Open Sans', sans-serif;
  }
  
  .wrapper {
    /* utiliser des unitées fluides, on ne met pas une largeur en pixels */
    width: 80%;
    /* on dit 80% mais on veut pas que ça dépasse 900Px pour les ecrans qui seraient super grands */
    max-width: 900px;
    /* pour centrer le wrapper horitotalement margin auto */
    margin: 0 auto;
  }
  
  .header__title {
    /* on va utiliser non pas le rose mais la variable */
    background-color: var(--main-color);
    color: #FFF;
    text-align: center;
    padding: 1rem;
    border-bottom: solid 4px #Add8E6;
    border-radius: 0 0 5px 5px;
    font-size: 2rem;
  }
  
  .nav {
    display: flex;
    justify-content: space-between;
  
    margin: 1rem 0;
  }
  .nav li {
    /* on display en ligne chaque item de la liste des liens */
    display: inline;
    /* on met de l'espace entre un lien et son voisin de droite */
    margin-right: 1rem;
  }
  .nav li img {
    /*  on fixe la taille des icones à 25px */
    width: 25px;
    height: 25px;
  }
  .nav a {
    text-decoration: none;
    font-size: 1.4rem;
    font-weight: bold;
  }
  
  .main__title {
    color: #00ccff;
    font-size: 1.8rem;
    margin-bottom: 1rem;
  }
  
  .main__paragraph {
    color: #FFF;
    margin-bottom: 1rem;
  }
  
  .cameleon-of-the-day {
    /* on met la balise figure en relatif pour que son enfant la légende soit positionné par rapport à elle */
    position: relative;
    margin-bottom: 1rem;
  }
  
  .cameleon-of-the-day__legend {
    /* on place la legend en absolute, elle va se positionner par rapport à son plus proche parent relatif : la balise figure */
    position: absolute;
    top: 0;
    left: 0;
    /* ici on utilise aussi la variable main-color definie dans :root */
    background-color: var(--main-color);
    color: #FFF;
    padding: 0.5rem;
  }
  
  .cameleon-of-the-day__img {
    width: 100%;
  }
  
  .gallery {
    /* on met display flex sur le bloc gallery pour organiser en flex ses 2 enfants : les image sà gauche et le aside à droite  */
    display: flex;
    /* par defaut il va etirer (stretch) l'enfant le plus petit pour qu'il soit de la meme hauteur que l'enfant le plus grand, nous on veut garder le aside plus petit donc on aligne en start et non stretch */
    align-items: flex-start;
  }
  .gallery-images {
    width: 75%;
  }
  .gallery-aside {
    width: 25%;
    background-color: #004488;
    color: yellowgreen;
    padding: 1rem;
    margin-left: 1rem;
  }
  .gallery-aside h3 {
    color: #00ccff;
    text-transform: uppercase;
    font-style: normal;
    border-bottom: 1px solid;
    padding-bottom: 1rem;
  }
  
  .footer {
    text-align: center;
    padding: 1rem;
    color: #00ccff;
    margin-top: 3rem;
  }
  
  
  /* --- Gallery version 2 : avec GRID --- */
  
  /* grid c'est comme flex on met display grid sur le PARENT des elements qu'on veut organiser en grille */
  .gallery-images {
    display: grid;
  
    /* on defini les colonnes et les lignes de notre grille */
    /* avec grid-template-columns et grid-template-rows on spécifie le nombre de lignes et de colonne 
    on peut definir la taille des colones avec des pixels ou avec l'inutié fr , 1fr = 1 fraction de l'espace dispo */
    /* grid-template-columns: 1fr 1fr 1fr 1fr; */
    grid-template-columns: repeat(4, 1fr);
  
    /* on ajoute un espacement entre les lignes et les colonnes avec la propriété gap */
    gap: 5px;
  }
  
  .gallery-images img {
    /* on dit aux images de prendre 100% d ela taille de leur cellule dans la grille */
    width: 100%;
  }
  
  /* on selectionne la première image : le premier enfant de notre grille et on va specifier sur combien de ligne et de colones il s'etend */
  .gallery-images img:first-child {
    /* commence à la ligne 1 et fini avant la 3 */
    grid-row: 1 / 3;
    /* s'étend (span) sur 2 colonnes */
    grid-column: span 2;
  }
  
  .gallery-images img:nth-child(15) {
    /* on selectionne l'image numéro 15 avec nth-child qui permet de recuperer une balise parmis ses soeurs */
    border: 4px solid #f0f;
    /* si on ajoute 4 px de border ça decalle tout, notre image qui faisait calc(25% - 5px) il faudrait encore enlever 4px * 2 de border */
    box-sizing: border-box;
  }
  
  

  
  
  /* ------ MEDIA QUERIES ----- */
  
  /* pour les devices qui sont plus petits que 900px de large on affiche le bloc aside sous le bloc des images */
  @media (max-width: 900px) {
    /* les regles ecrites ici ne seront valables QUE pour les devices qui sont au max 900px donc ceux qui sont plus petits que 901px */
  
    .gallery {
      /* on passe le display en wrap pour mettre chaque enfant sur une ligne si sa taille depasse */
      flex-wrap: wrap;
    }
  
    .gallery-images, .gallery-aside {
      /*  nos bloc font 100% donc ils prennent toute la ligne */
      width: 100%;
    }
  
    .gallery-aside {
      margin-left: 0;
      margin-top: 1rem;
    }
  }
  
  /* pour les devices (appareils) qui ont un écran plus petits que 500px (mobiles) on veut 2 images par ligne au lieu de 4 */
  @media (max-width: 500px) {
  
    .gallery-images {
      /* on ne fait que 2 colonnes */
      grid-template-columns: repeat(2, 1fr);
    }
  
  }